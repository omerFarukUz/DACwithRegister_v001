
DACwithRegister_v001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000490  08000490  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000490  08000490  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000490  08000490  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000490  08000490  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000498  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001386  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004c0  00000000  00000000  000213fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001e8  00000000  00000000  000218c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000157  00000000  00000000  00021aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023300  00000000  00000000  00021bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000024d7  00000000  00000000  00044eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d85d0  00000000  00000000  000473d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005d0  00000000  00000000  0011f9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0011ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000478 	.word	0x08000478

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08000478 	.word	0x08000478

080001ec <delay1>:


int count = 0;

void delay1(uint32_t data)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	while(data--);
 80001f4:	bf00      	nop
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d1fa      	bne.n	80001f6 <delay1+0xa>
}
 8000200:	bf00      	nop
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
	...

08000210 <RCC_Config>:

void RCC_Config()
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	RCC->CR |= 0x10000; 			  // HSEON enable
 8000214:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <RCC_Config+0x98>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <RCC_Config+0x98>)
 800021a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800021e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x20000));      // HSEON Ready Flag wait
 8000220:	bf00      	nop
 8000222:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <RCC_Config+0x98>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f9      	beq.n	8000222 <RCC_Config+0x12>
	RCC->CR |= 0x80000;				  // CSS enable
 800022e:	4b1e      	ldr	r3, [pc, #120]	; (80002a8 <RCC_Config+0x98>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <RCC_Config+0x98>)
 8000234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000238:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x400000; 		  // PLL e HSE sectik
 800023a:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <RCC_Config+0x98>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <RCC_Config+0x98>)
 8000240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000244:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x000004; 		  // PLL M = 4
 8000246:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <RCC_Config+0x98>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <RCC_Config+0x98>)
 800024c:	f043 0304 	orr.w	r3, r3, #4
 8000250:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x005A00; 		  // PLL N=168
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <RCC_Config+0x98>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <RCC_Config+0x98>)
 8000258:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 800025c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x000000; 		  // PLL P=2
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <RCC_Config+0x98>)
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <RCC_Config+0x98>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x000000; 		 	  // AHB Prescaler = 1
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <RCC_Config+0x98>)
 8000268:	4a0f      	ldr	r2, [pc, #60]	; (80002a8 <RCC_Config+0x98>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x080000; 		  	  // APB2 Prescaler = 2
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <RCC_Config+0x98>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <RCC_Config+0x98>)
 8000274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000278:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x001400; 		  	  // APB1 Presclaer = 4
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <RCC_Config+0x98>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <RCC_Config+0x98>)
 8000280:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000284:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000;			  // HSERDY Flag Clear
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <RCC_Config+0x98>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <RCC_Config+0x98>)
 800028c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000290:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;			  // CSS Flag Clear
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <RCC_Config+0x98>)
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <RCC_Config+0x98>)
 8000298:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800029c:	60d3      	str	r3, [r2, #12]

}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40023800 	.word	0x40023800

080002ac <DAC1_Config>:

void DAC1_Config()
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=  RCC_AHB1ENR_GPIOAEN;		// RCC GPIOA Clock Enable
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <DAC1_Config+0x44>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b4:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <DAC1_Config+0x44>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |=  RCC_APB1ENR_DACEN;			// RCC DAC Clock enable
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <DAC1_Config+0x44>)
 80002be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <DAC1_Config+0x44>)
 80002c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80002c6:	6413      	str	r3, [r2, #64]	; 0x40
	DAC->CR |= DAC_CR_EN1;						// DAC Channel 1 enable
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <DAC1_Config+0x48>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <DAC1_Config+0x48>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
	DAC->SWTRIGR &= ~(DAC_SWTRIGR_SWTRIG1);		// DAC Channel 1 software trigger disable
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <DAC1_Config+0x48>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <DAC1_Config+0x48>)
 80002da:	f023 0301 	bic.w	r3, r3, #1
 80002de:	6053      	str	r3, [r2, #4]
	DAC->DHR12R1 = 0;									// DAC Channel 1 12-bit right alignment
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <DAC1_Config+0x48>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]



}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40007400 	.word	0x40007400

080002f8 <main>:


int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

	RCC_Config();
 80002fc:	f7ff ff88 	bl	8000210 <RCC_Config>
	DAC1_Config();
 8000300:	f7ff ffd4 	bl	80002ac <DAC1_Config>



  while (1)
  {
	  for(;count < 4096; count++)
 8000304:	e00c      	b.n	8000320 <main+0x28>
	  {
		  DAC->DHR12R1 = count;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x3c>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <main+0x40>)
 800030c:	609a      	str	r2, [r3, #8]
		  delay1(16800);
 800030e:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8000312:	f7ff ff6b 	bl	80001ec <delay1>
	  for(;count < 4096; count++)
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <main+0x3c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <main+0x3c>)
 800031e:	6013      	str	r3, [r2, #0]
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <main+0x3c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000328:	dbed      	blt.n	8000306 <main+0xe>
	  }
	  count = 0;
 800032a:	4b02      	ldr	r3, [pc, #8]	; (8000334 <main+0x3c>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
	  for(;count < 4096; count++)
 8000330:	e7f6      	b.n	8000320 <main+0x28>
 8000332:	bf00      	nop
 8000334:	20000020 	.word	0x20000020
 8000338:	40007400 	.word	0x40007400

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000340:	e7fe      	b.n	8000340 <NMI_Handler+0x4>

08000342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <HardFault_Handler+0x4>

08000348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <MemManage_Handler+0x4>

0800034e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>

0800035a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000388:	f000 f83e 	bl	8000408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <SystemInit+0x20>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <SystemInit+0x20>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	e000ed00 	.word	0xe000ed00

080003b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003b8:	f7ff ffea 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003e2:	f000 f825 	bl	8000430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e6:	f7ff ff87 	bl	80002f8 <main>
  bx  lr    
 80003ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f8:	08000498 	.word	0x08000498
  ldr r2, =_sbss
 80003fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000400:	20000028 	.word	0x20000028

08000404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC_IRQHandler>
	...

08000408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <HAL_IncTick+0x20>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_IncTick+0x24>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4413      	add	r3, r2
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_IncTick+0x24>)
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	20000000 	.word	0x20000000
 800042c:	20000024 	.word	0x20000024

08000430 <__libc_init_array>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	4d0d      	ldr	r5, [pc, #52]	; (8000468 <__libc_init_array+0x38>)
 8000434:	4c0d      	ldr	r4, [pc, #52]	; (800046c <__libc_init_array+0x3c>)
 8000436:	1b64      	subs	r4, r4, r5
 8000438:	10a4      	asrs	r4, r4, #2
 800043a:	2600      	movs	r6, #0
 800043c:	42a6      	cmp	r6, r4
 800043e:	d109      	bne.n	8000454 <__libc_init_array+0x24>
 8000440:	4d0b      	ldr	r5, [pc, #44]	; (8000470 <__libc_init_array+0x40>)
 8000442:	4c0c      	ldr	r4, [pc, #48]	; (8000474 <__libc_init_array+0x44>)
 8000444:	f000 f818 	bl	8000478 <_init>
 8000448:	1b64      	subs	r4, r4, r5
 800044a:	10a4      	asrs	r4, r4, #2
 800044c:	2600      	movs	r6, #0
 800044e:	42a6      	cmp	r6, r4
 8000450:	d105      	bne.n	800045e <__libc_init_array+0x2e>
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f855 3b04 	ldr.w	r3, [r5], #4
 8000458:	4798      	blx	r3
 800045a:	3601      	adds	r6, #1
 800045c:	e7ee      	b.n	800043c <__libc_init_array+0xc>
 800045e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000462:	4798      	blx	r3
 8000464:	3601      	adds	r6, #1
 8000466:	e7f2      	b.n	800044e <__libc_init_array+0x1e>
 8000468:	08000490 	.word	0x08000490
 800046c:	08000490 	.word	0x08000490
 8000470:	08000490 	.word	0x08000490
 8000474:	08000494 	.word	0x08000494

08000478 <_init>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr

08000484 <_fini>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr
